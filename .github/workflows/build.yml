name: CMake Build Matrix

on:
  push:
    branches: build

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, 3.11]
        os: [ windows-2022, ubuntu-22.04, ubuntu-24.04, macos-13, macos-14 ]
        exclude:
          - os: ubuntu-22.04
            python-version: 3.9
          - os: ubuntu-24.04
            python-version: 3.9
          - os: macos-14
            python-version: 3.9
        include:
          - os: ubuntu-22.04
            gcc-version: 10
          - os: ubuntu-24.04
            gcc-version: 13
          - os: macos-13
            llvm-version: 15
          - os: macos-14
            llvm-version: 18
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      if: runner.os != 'Linux'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name:  Install Linux
      if: runner.os == 'Linux'
      shell: bash
      run:   |
        sudo apt-get update
        sudo apt-get install python3-sphinx python3-dev libxml2-dev libfltk1.3-dev fluid libjpeg-dev libglm-dev libcminpack-dev libglew-dev swig doxygen graphviz texlive-latex-base zip pandoc

    - name:  Install Windows
      if: runner.os == 'Windows'
      shell: cmd
      run:   |
        choco install -y swig pandoc
        pip install sphinx

    - name:  Install MacOS
      if: runner.os == 'macos'
      shell: bash
      run:   |
        brew install swig llvm@${{ matrix.llvm-version }} libomp doxygen graphviz pandoc
        pip install sphinx

    - name: Install cmake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.x'

    - name:  Build Linux
      if: runner.os == 'Linux'
      env:
        CC: gcc-${{ matrix.gcc-version }}
        CXX: g++-${{ matrix.gcc-version }}
      shell: bash
      run:   |
        mkdir build buildlibs artifacts
        cd $GITHUB_WORKSPACE/buildlibs
        cmake -DCMAKE_BUILD_TYPE=Release -DVSP_USE_SYSTEM_LIBXML2=true -DVSP_USE_SYSTEM_GLM=true -DVSP_USE_SYSTEM_GLEW=true -DVSP_USE_SYSTEM_CMINPACK=true ../Libraries
        make -j2
        
        cd $GITHUB_WORKSPACE/build
        cmake -DCMAKE_BUILD_TYPE=Release -DVSP_CPACK_GEN=DEB -DVSP_LIBRARY_PATH=$GITHUB_WORKSPACE/buildlibs ../src
        make -j2 package
        
        DEBFILE=${GITHUB_WORKSPACE}/build/OpenVSP-*-Linux.deb
        VSPVER=$(ls $DEBFILE | awk 'BEGIN { FS = "-" } ; { print $2 }')
        UVER=$(lsb_release -sr)
        DEPLOY_FILE=${GITHUB_WORKSPACE}/build/OpenVSP-${VSPVER}-Ubuntu-${UVER}_amd64_${GITHUB_SHA}.deb
        
        cp $DEBFILE $DEPLOY_FILE
        cp $DEPLOY_FILE $GITHUB_WORKSPACE/artifacts
        
        ls $DEPLOY_FILE && (echo "DEB CREATION SUCCESSFUL" && exit 0) || (echo "DEB CREATION FAILED" && exit 1)

    - name:  Build Windows
      if: runner.os == 'Windows'
      shell: bash
      run:   |
        mkdir build buildlibs artifacts
        cd $GITHUB_WORKSPACE\\buildlibs
        cmake -DCMAKE_BUILD_TYPE=Release -A x64 ..\\Libraries

        cmake --build . --config Release -j 2
        cd $GITHUB_WORKSPACE\\build

        cmake -DCMAKE_BUILD_TYPE=Release -DVSP_LIBRARY_PATH=$GITHUB_WORKSPACE\\buildlibs -A x64 ..\\src

        cmake --build . --target package --config Release -j 2

        ZIPFILE=OpenVSP*.zip
        VSPVER=$(ls $ZIPFILE | awk 'BEGIN { FS = "-" } ; { print $2 }')
        WINVER=$(ls $ZIPFILE | awk 'BEGIN { FS = "-" } ; { print $3 }' | awk 'BEGIN { FS = "." } ; { print $1 }' )
        
        DEPLOY_FILE=OpenVSP-${VSPVER}-${WINVER}-Python${{ matrix.python-version }}_${GITHUB_SHA}.zip
        cp $ZIPFILE $DEPLOY_FILE
        cp $DEPLOY_FILE $GITHUB_WORKSPACE\\artifacts
        
        ls $DEPLOY_FILE && (echo "ZIP CREATION SUCCESSFUL" && exit 0) || (echo "ZIP CREATION FAILED" && exit 1)

    - name:  Build MacOS
      if: runner.os == 'macos'
      shell: bash
      run:   |
        mkdir build buildlibs artifacts
        cd $GITHUB_WORKSPACE/buildlibs
        cmake -DCMAKE_C_COMPILER=$(brew --prefix llvm@${{ matrix.llvm-version }})/bin/clang -DCMAKE_CXX_COMPILER=$(brew --prefix llvm@${{ matrix.llvm-version }})/bin/clang++ -DCMAKE_BUILD_TYPE=Release ../Libraries
        make -j2
        
        cd $GITHUB_WORKSPACE/build
        cmake -DVSP_LIBRARY_PATH=$GITHUB_WORKSPACE/buildlibs -DOpenMP_ROOT=$(brew --prefix libomp) -DCMAKE_C_COMPILER=$(brew --prefix llvm@${{ matrix.llvm-version }})/bin/clang -DCMAKE_CXX_COMPILER=$(brew --prefix llvm@${{ matrix.llvm-version }})/bin/clang++ -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="~/OpenVSP_Install" ../src
        make -j2 package
        
        ZIPFILE=${GITHUB_WORKSPACE}/build/OpenVSP-*-MacOS.zip
        VSPVER=$(ls $ZIPFILE | awk 'BEGIN { FS = "-" } ; { print $2 }')
        DEPLOY_FILE=${GITHUB_WORKSPACE}/build/OpenVSP-${VSPVER}-${{ matrix.os }}-${RUNNER_ARCH}-Python${{ matrix.python-version }}_${GITHUB_SHA}.zip
        
        cp $ZIPFILE $DEPLOY_FILE
        cp $DEPLOY_FILE $GITHUB_WORKSPACE/artifacts
        
        ls $DEPLOY_FILE && (echo "ZIP CREATION SUCCESSFUL" && exit 0) || (echo "ZIP CREATION FAILED" && exit 1)

    - name: Generate Documentation
      if: matrix.os == 'macos-14'
      shell: bash
      run:    |
        cd $GITHUB_WORKSPACE/build

        make doc

        cd doc
        zip -r html.zip html

        cp html.zip $GITHUB_WORKSPACE/artifacts
        ls html.zip && (echo "DOC GEN SUCCESSFUL" && exit 0) || (echo "DOC GEN FAILED" && exit 1)

    - name: Python Documentation
      if: matrix.os == 'macos-14'
      shell: bash
      run:    |
        cd $GITHUB_WORKSPACE/build

        cp pydoc.zip $GITHUB_WORKSPACE/artifacts
        ls pydoc.zip && (echo "PYDOC COPY SUCCESSFUL" ) || (echo "PYDOC COPY FAILED" )

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artifact-${{ matrix.os }}-${{ matrix.python-version }}
        path: ${{ github.workspace }}/artifacts

  merge:
   runs-on: ubuntu-latest
   needs: build
   steps:
     - name: Merge Artifacts
       uses: actions/upload-artifact/merge@v4
       with:
         name: combined-artifact
         pattern: artifact-*
