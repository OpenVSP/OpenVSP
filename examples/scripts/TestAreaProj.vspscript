
void PrintAnalysisInputs( string analysis )
{
    Print( "Analysis: " + analysis );
    Print( "Inputs:" );

    array < string > @ inp_array = GetAnalysisInputNames( analysis );

    for ( int j = 0; j < int( inp_array.size() ); j++ )
    {
        Print( inp_array[j], false );

        int typ = GetAnalysisInputType( analysis, inp_array[j] );
        int ndat = GetNumAnalysisInputData( analysis, inp_array[j] );

        if ( typ == INT_DATA )
        {
            for ( int indx = 0; indx < ndat; indx++ )
            {
                array<int>@ dat = GetIntAnalysisInput( analysis, inp_array[j], indx );

                for ( int m = 0; m < int( dat.size() ); m++ )
                {
                    Print( dat[m], false );
                }
                Print( "" );
            }
        }
        else if ( typ == DOUBLE_DATA )
        {
            for ( int indx = 0; indx < ndat; indx++ )
            {
                array<double>@ dat = GetDoubleAnalysisInput( analysis, inp_array[j], indx );

                for ( int m = 0; m < int( dat.size() ); m++ )
                {
                    Print( dat[m], false );
                }
                Print( "" );
            }
        }
        else if ( typ == STRING_DATA )
        {
            for ( int indx = 0; indx < ndat; indx++ )
            {
                array<string>@ dat = GetStringAnalysisInput( analysis, inp_array[j], indx );

                for ( int m = 0; m < int( dat.size() ); m++ )
                {
                    Print( dat[m], false );
                }
                Print( "" );
            }
        }
        else if ( typ == VEC3D_DATA )
        {
            for ( int indx = 0; indx < ndat; indx++ )
            {
                array<vec3d>@ dat = GetVec3dAnalysisInput( analysis, inp_array[j], indx );

                for ( int m = 0; m < int( dat.size() ); m++ )
                {
                    Print( dat[m], false );
                }
                Print( "" );
            }
        }
        else
        {
            Print( "Unrecognized type." );
        }
    }
}

void PrintResults( string results )
{
    Print( "Results ID: " + results );

    array < string > @ res_array = GetAllDataNames( results );

    for ( int j = 0; j < int( res_array.size() ); j++ )
    {
        Print( res_array[j], false );

        int typ = GetResultsType( results, res_array[j] );
        int ndat = GetNumData( results, res_array[j] );

        if ( typ == INT_DATA )
        {
            for ( int indx = 0; indx < ndat; indx++ )
            {
                array<int>@ dat = GetIntResults( results, res_array[j], indx );

                for ( int m = 0; m < int( dat.size() ); m++ )
                {
                    Print( dat[m], false );
                Print( "" );
                }
            }
        }
        else if ( typ == DOUBLE_DATA )
        {
            for ( int indx = 0; indx < ndat; indx++ )
            {
                array<double>@ dat = GetDoubleResults( results, res_array[j], indx );

                for ( int m = 0; m < int( dat.size() ); m++ )
                {
                    Print( dat[m], false );
                }
                Print( "" );
            }
        }
        else if ( typ == STRING_DATA )
        {
            for ( int indx = 0; indx < ndat; indx++ )
            {
                array<string>@ dat = GetStringResults( results, res_array[j], indx );

                for ( int m = 0; m < int( dat.size() ); m++ )
                {
                    Print( dat[m], false );
                }
                Print( "" );
            }
        }
        else if ( typ == VEC3D_DATA )
        {
            for ( int indx = 0; indx < ndat; indx++ )
            {
                array<vec3d>@ dat = GetVec3dResults( results, res_array[j], indx );

                for ( int m = 0; m < int( dat.size() ); m++ )
                {
                    Print( dat[m], false );
                }
                Print( "" );
            }
        }
        else
        {
            Print( "Unrecognized type." );
        }
    }
    Print("");
}


void main()
{
    string fid = AddGeom( "POD", "" );

    Update();

    int nanalysis = GetNumAnalysis();

    Print( "Number of registered analyses: " + nanalysis );
    Print( "" );

    array< string > @analysis_array = ListAnalysis();

    for ( int i = 0; i < int( analysis_array.size() ); i++ )
    {
        PrintAnalysisInputs( analysis_array[i] );
        Print( "" );
    }

    // Projected Areas
    array<int> dirtype = GetIntAnalysisInput( "Projection", "DirectionType" );
    dirtype[0] = X_PROJ;
    SetIntAnalysisInput( "Projection", "DirectionType", dirtype );

    string rid = ExecAnalysis( "Projection" );
    PrintResults( rid );
    WriteResultsCSVFile( rid, "XProj.csv" );
    DeleteGeomVec( GetStringResults( rid, "Mesh_GeomID" ) );

    dirtype[0] = Y_PROJ;
    SetIntAnalysisInput( "Projection", "DirectionType", dirtype );

    rid = ExecAnalysis( "Projection" );
    PrintResults( rid );
    WriteResultsCSVFile( rid, "YProj.csv" );
    DeleteGeomVec( GetStringResults( rid, "Mesh_GeomID" ) );

    dirtype[0] = Z_PROJ;
    SetIntAnalysisInput( "Projection", "DirectionType", dirtype );

    rid = ExecAnalysis( "Projection" );
    PrintResults( rid );
    WriteResultsCSVFile( rid, "ZProj.csv" );
    DeleteGeomVec( GetStringResults( rid, "Mesh_GeomID" ) );


    //==== Check For API Errors ====//
    while ( GetNumTotalErrors() > 0 )
    {
        ErrorObj err = PopLastError();
        Print( err.GetErrorString() );
    }

}
